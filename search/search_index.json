{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b 6 \u0441\u0435\u043c\u0435\u0441\u0442\u0440","text":"<p>\u0417\u0434\u0435\u0441\u044c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b  \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b.</p>"},{"location":"lab-1/","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0438 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438","text":"<p>\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438:</p> <p>\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438:</p> <ul> <li>\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 1</li> <li>\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 2</li> <li>\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 3</li> </ul> <p>\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f:</p> <p>\u0422\u0435\u043a\u0441\u0442 \u0440\u0430\u0431\u043e\u0442\u044b</p> \u0417\u0430\u0434\u0430\u043d\u0438\u0435 <p>\u0420\u0430\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b-\u0442\u0430\u0439\u043c-\u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430.</p> <p>\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u0439\u0442\u0435 \u043f\u0440\u043e\u0441\u0442\u0443\u044e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443-\u0442\u0430\u0439\u043c-\u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0432\u0430\u0448\u0438\u043c \u0432\u0440\u0435\u043c\u0435\u043d\u0435\u043c \u0438 \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438.  \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0442\u044c \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0438 \u0441 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u043c, \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0442\u044c \u0438\u043c \u0441\u0440\u043e\u043a\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0438 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u044b,  \u0430 \u0442\u0430\u043a\u0436\u0435 \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u0442\u044c \u0437\u0430\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u043d\u0430 \u043a\u0430\u0436\u0434\u0443\u044e \u0437\u0430\u0434\u0430\u0447\u0443.</p> <p>\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043c\u043e\u0433\u0443\u0442 \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0432 \u0441\u0435\u0431\u044f \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u044f \u043e \u043f\u0440\u0438\u0431\u043b\u0438\u0436\u0435\u043d\u0438\u0438 \u043a \u0434\u0435\u0434\u043b\u0430\u0439\u043d\u0430\u043c,  \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0435\u0436\u0435\u0434\u043d\u0435\u0432\u043d\u043e\u0433\u043e \u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0438 \u0430\u043d\u0430\u043b\u0438\u0437 \u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u0437\u0430\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u043d\u0430 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.</p>"},{"location":"lab-1/auth/","title":"Auth","text":"auth.py auth.py<pre><code>import datetime\n\nfrom fastapi import HTTPException, Security, Depends\nfrom fastapi.security import HTTPBearer, HTTPAuthorizationCredentials, OAuth2PasswordBearer\nimport jwt\nfrom passlib.context import CryptContext\n\nfrom dotenv import load_dotenv\n\nfrom exceptions.not_auth_exception import NotAuthException\n\nload_dotenv()\n\nfrom connection import *\nfrom models.user_models import *\n\n\nclass AuthHandler:\n    security = HTTPBearer()\n\n    pwd_context = CryptContext(schemes=['bcrypt'])\n    load_dotenv()\n    secret = os.getenv(\"SECRET\")\n\n    # \u0445\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0430\u0440\u043e\u043b\u044f\n    def get_hash(self, password):\n        return self.pwd_context.hash(password)\n\n    # \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u043f\u0430\u0440\u043e\u043b\u044f\n    def verify(self, pwd, hashed_pwd):\n        return self.pwd_context.verify(pwd, hashed_pwd, scheme='bcrypt')\n\n    # \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0442\u043e\u043a\u0435\u043d\u0430\n    def encode_token(self, user_id):\n        payload = {\n            'exp': datetime.datetime.utcnow() + datetime.timedelta(hours=1),\n            'iat': datetime.datetime.utcnow(),\n            'sub': user_id\n        }\n        print(\"payload\", payload)\n\n        testjwt = (jwt.encode(payload, self.secret, algorithm='HS256'))\n        print(\"decoded\", self.decode_token(testjwt))\n\n        return jwt.encode(payload, self.secret, algorithm='HS256')\n\n    # \u0434\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430\n    def decode_token(self, token):\n        try:\n            payload = jwt.decode(token, self.secret, algorithms=['HS256'])\n            return payload['sub']\n        except jwt.ExpiredSignatureError:\n            raise HTTPException(status_code=401, detail=\"Signature expired\")\n        except jwt.InvalidTokenError:\n            raise HTTPException(status_code=401, detail=f\"Invalid token\")\n\n    # \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0441\u0435\u0441\u0441\u0438\u0438\n    def current_user(self, auth: HTTPAuthorizationCredentials = Security(security),\n                     session=Depends(get_session)) -&gt; User:\n        print(\"auth\", auth.credentials)\n        id = self.decode_token(auth.credentials)\n        if not id:\n            raise NotAuthException\n        db_user = session.get(User, id)\n        if not db_user:\n            raise NotAuthException\n        return db_user\n</code></pre>"},{"location":"lab-1/db/","title":"Db","text":""},{"location":"lab-1/db/#_1","title":"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0431\u0434","text":"db connaction connection.py<pre><code>import os\n\nfrom dotenv import load_dotenv\n\nfrom sqlmodel import SQLModel, Session, create_engine, text\n\nload_dotenv()\ndb_url = os.getenv(\"DB_LINK\")\nengine = create_engine(db_url)\n\n\ndef init_db():\n    SQLModel.metadata.drop_all(engine)\n    SQLModel.metadata.create_all(engine)\n\n\ndef get_session():\n    with Session(engine) as session:\n        yield session\n</code></pre>"},{"location":"lab-1/endpoints/","title":"Endpoints","text":"location_model.pytrip_endpoints.pystep_endpoints.pyuser_endpoints.pyuser_trip_link_endpoints.py location_endpoints.py<pre><code>from typing import Sequence, Type\n\nfrom fastapi import APIRouter, Depends\nfrom sqlmodel import Session, select\n\nfrom auth import AuthHandler\nfrom connection import get_session\nfrom models.location_models import Location, LocationDefault\n\nlocation_router = APIRouter(tags=['Location'])\nauth_handler = AuthHandler()\n\n\n@location_router.get(\"/location/all\")\ndef trip_list(session: Session = Depends(get_session)) -&gt; Sequence[Location]:\n    return session.exec(select(Location)).all()\n\n\n@location_router.post(\"/location/create\")\ndef create_location(location: LocationDefault, session: Session = Depends(get_session)) -&gt; Location:\n\n    location = Location.model_validate(location)\n    session.add(location)\n    session.commit()\n    session.refresh(location)\n    return location\n\n\n@location_router.delete(\"/location/delete\")\ndef delete_location(location_id: int, session: Session = Depends(get_session\n                                                                 )) -&gt; Type[Location] | None:\n    location = session.get(Location, location_id)\n    session.delete(location)\n    session.commit()\n    return location\n</code></pre> trip_endpoints.py<pre><code>from typing import Sequence, List\n\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom sqlmodel import select, Session\nfrom typing_extensions import TypedDict\n\nfrom auth import AuthHandler\nfrom connection import get_session\nfrom exceptions.forbbiden_exception import Forbidden\nfrom exceptions.user_not_found_exception import UserNotFoundException\nfrom models.trip_models import Trip, TripInput, TripDetailed\nfrom models.user_models import User\nfrom models.user_trip_link_models import UserTripLink, UserTripLinkDefault, UserTripLinkTrips\n\ntrip_router = APIRouter(tags=['Trips'])\nauth_handler = AuthHandler()\n\n\n@trip_router.get(\"/trip/all\", response_model=List[TripDetailed])\ndef trip_list(session: Session = Depends(get_session)) -&gt; Sequence[Trip]:\n    return session.exec(select(Trip)).all()\n\n\n@trip_router.get(\"/trip/my\")\ndef trip_my(user=Depends(auth_handler.current_user)) -&gt; List[UserTripLinkTrips]:\n\n    if not user:\n        raise UserNotFoundException\n    roles = [link.role for link in user.trips]\n    trips = [TripDetailed.model_validate(link.trip) for link in user.trips]\n    users_trips = [UserTripLinkTrips(role=r, trip=t) for r, t in zip(roles, trips)]\n\n    if not user:\n        raise HTTPException(status_code=404, detail=\"User has no trips\")\n    return users_trips\n\n@trip_router.get(\"/trip/{trip_id}\")\ndef trip_one(trip_id: int, session=Depends(get_session)) -&gt; Trip:\n    trip = session.get(Trip, trip_id)\n    if not trip:\n        raise HTTPException(status_code=404, detail=\"Trip not found\")\n    return trip\n\n\n@trip_router.post(\"/trip/create\")\ndef trip_create(trip: TripInput, session=Depends(get_session),\n                current=Depends(auth_handler.current_user)) -&gt; Trip:\n    trip = Trip.model_validate(trip)\n\n    session.add(trip)\n    session.commit()\n    session.refresh(trip)\n    link = UserTripLinkDefault(user_id=current.id, trip_id=trip.id, role='creator')\n    link = UserTripLink.model_validate(link)\n    session.add(link)\n    session.commit()\n    session.refresh(link)\n    session.refresh(trip)\n    return trip\n\ndef user_in_members(trip_id: int, user_id: int) -&gt; bool:\n    generator = get_session()\n    session = next(generator)\n    user = session.get(User, user_id)\n    if not user:\n        raise UserNotFoundException\n    trip = session.get(Trip, trip_id)\n    if not trip:\n        raise HTTPException(status_code=404, detail=\"Trip not found\")\n    return user.id in [mem.user.id for mem in trip.members]\n\n@trip_router.delete(\"/trip/delete/{trip_id}\")\ndef trip_delete(trip_id: int, session=Depends(get_session),\n                current_user=Depends(auth_handler.current_user)):\n\n    if not (current_user.is_admin or user_in_members(trip_id, current_user.id)):\n        raise Forbidden\n    trip = session.get(Trip, trip_id)\n    session.delete(trip)\n    session.commit()\n    return {\"status\": 201, \"message\": f\"deleted trip with id {trip_id}\"}\n</code></pre> step_endpoints.py<pre><code>from typing import Sequence, Type\n\nfrom fastapi import APIRouter, Depends\nfrom sqlmodel import Session, select\n\nfrom auth import AuthHandler\nfrom connection import get_session\nfrom models.step_models import Step, StepDefault\n\nstep_router = APIRouter(tags=['Step'])\nauth_handler = AuthHandler()\n\n\n@step_router.get(\"/step/all\")\ndef trip_list(session: Session = Depends(get_session)) -&gt; Sequence[Step]:\n    return session.exec(select(Step)).all()\n\n\n@step_router.post(\"/step/create\")\ndef create_step(step: StepDefault, session: Session = Depends(get_session)) -&gt; Step:\n\n    step = Step.model_validate(step)\n    session.add(step)\n    session.commit()\n    session.refresh(step)\n    return step\n\n\n@step_router.delete(\"/step/delete\")\ndef delete_step(step_id: int, session: Session = Depends(get_session\n                                                                 )) -&gt; Type[Step] | None:\n    step = session.get(Step, step_id)\n    session.delete(step)\n    session.commit()\n    return step\n</code></pre> user_endpoints.py<pre><code>from typing import Sequence\n\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom sqlmodel import Session, select\nfrom typing_extensions import TypedDict\n\nfrom auth import AuthHandler\nfrom connection import get_session\nfrom exceptions.forbbiden_exception import Forbidden\nfrom exceptions.invalid_password_exception import InvalidPasswordException\nfrom exceptions.user_not_found_exception import UserNotFoundException\nfrom exceptions.username_registered_exception import UsernameAlreadyRegisteredException\nfrom models.user_models import *\nfrom models.user_models import User\n\nuser_router = APIRouter(tags=[\"User\"])\nauth_handler = AuthHandler()\n\n\n@user_router.get(\"/user/all\", response_model=List[User])\ndef user_list(session: Session = Depends(get_session)) -&gt; Sequence[User]:\n    users = session.exec(select(User)).all()\n    return users\n\n\n@user_router.get(\"/user/me\")\ndef user_me(current=Depends(auth_handler.current_user)) -&gt; UserDefault:\n    user = current\n    if not user:\n        raise UserNotFoundException\n    user_model = user.model_dump(exclude={'password'})\n    return UserDefault.model_validate(user_model)\n\n\n@user_router.get(\"/user/{user_id}\")\ndef user(user_id: str, session: Session = Depends(get_session)) -&gt; UserDefault:\n    user = session.exec(select(User).filter(User.id == user_id)).first()\n    return user\n\n\n@user_router.post(\"/user/create\")\ndef create(user_data: UserCreate, session: Session = Depends(get_session)) -&gt; TypedDict('Response', {\"status\": int,\n                                                                                                    \"data\": User}):\n    db_user = session.exec(select(User).filter(User.username == user_data.username)).first()\n    if db_user:\n        raise UsernameAlreadyRegisteredException()\n\n    user_data = user_data.model_dump(exclude_unset=True)\n    hashed_pwd = auth_handler.get_hash(user_data.get('password'))\n    user_data['password'] = hashed_pwd\n\n    user = User.model_validate(user_data)\n    session.add(user)\n    session.commit()\n    session.refresh(user)\n\n    return {\"status\": 200, \"data\": user}\n\n\n@user_router.post(\"/user/login\")\ndef user_login(user_login: UserLogin, session=Depends(get_session)) -&gt; TypedDict('Response', {\"access_token\": str}):\n    print(\"user_login\", user_login)\n    user_data = user_login.model_dump(exclude_unset=True)\n    found_user = session.exec(select(User).where(User.username == user_data.get('username'))).first()\n    if not found_user:\n        raise UserNotFoundException\n    verified = auth_handler.verify(user_data.get('password'), found_user.password)\n    if not verified:\n        raise InvalidPasswordException\n    token = auth_handler.encode_token(found_user.id)\n    return {\"access_token\": token}\n\n\n@user_router.patch(\"/user/change_password\")\ndef user_change_password(user_pwd: UserPasswordChanging, session=Depends(get_session),\n                         current=Depends(auth_handler.current_user)) -&gt; TypedDict('Response', {\"status\": int,\n                                                                                               \"message\": str}):\n    found_user = session.get(User, current.id)\n    if not found_user:\n        raise UserNotFoundException\n    verified = auth_handler.verify(user_pwd.old_password, found_user.password)\n\n    if not verified:\n        raise HTTPException(status_code=400, detail=\"Invalid old password\")\n\n    hashed_pwd = auth_handler.get_hash(user_pwd.new_password)\n    found_user.password = hashed_pwd\n    session.add(found_user)\n    session.commit()\n    session.refresh(found_user)\n    return {\"status\": 200, \"message\": \"password changed successfully\"}\n\n\n@user_router.delete(\"/user/delete/{user_id}\")\ndef user_delete(user_id: int,\n                session=Depends(get_session),\n                user=Depends(auth_handler.current_user)) -&gt; TypedDict('Response', {\"status\": int,\n                                                                                   \"message\": str}):\n    if not user:\n        raise UserNotFoundException\n    if not (user_id == user.id or user.is_admin):\n        raise Forbidden\n    session.delete(user)\n    session.commit()\n    return {\"status\": 201, \"message\": f\"deleted user with id {user_id}\"}\n</code></pre> user_trip_link_endpoints.py<pre><code>from typing import Sequence\n\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom sqlmodel import Session, select\nfrom typing_extensions import TypedDict\n\nfrom auth import AuthHandler\nfrom connection import get_session\nfrom exceptions.forbbiden_exception import Forbidden\nfrom models.user_trip_link_models import UserTripLink, UserTripLinkDefault\n\nuser_trip_link_router = APIRouter(tags=['UserTripLinks'])\nauth_handler = AuthHandler()\n\n\n@user_trip_link_router.get(\"/usertrip/all\")\ndef link_list(session: Session = Depends(get_session)) -&gt; Sequence[UserTripLink]:\n    return session.exec(select(UserTripLink)).all()\n\n\n@user_trip_link_router.post(\"/usertrip/bind\")\ndef link_create(link: UserTripLinkDefault, session=Depends(get_session),\n                current=Depends(auth_handler.current_user)) -&gt; TypedDict('Response', {\"status\": int,\n                                                                                      \"data\": UserTripLink}):\n    if not (link.user_id == current.id or current.is_admin):\n        raise Forbidden\n\n    link = UserTripLink.model_validate(link)\n    session.add(link)\n    session.commit()\n    session.refresh(link)\n    return {\"status\": 200, \"data\": link}\n\n\n@user_trip_link_router.delete(\"/UserTripLink/delete/{user_id}in{trip_id}\")\ndef link_delete(user_id: int, trip_id: int, session=Depends(get_session),\n                current=Depends(auth_handler.current_user)):\n    if not (user_id == current.id or current.is_admin):\n        raise Forbidden\n\n    link = session.exec(\n        select(UserTripLink).where(UserTripLink.user_id == user_id and UserTripLink.trip_id == trip_id)).first()\n    if not link:\n        raise HTTPException(status_code=404, detail=\"This user is not in this trip\")\n    session.delete(link)\n    session.commit()\n\n    return {\"status\": 201, \"message\": f\"deleted user {user_id} from trip {trip_id}\"}\n</code></pre>"},{"location":"lab-1/models/","title":"Models","text":""},{"location":"lab-1/models/#_1","title":"\u041c\u043e\u0434\u0435\u043b\u0438","text":"location_models.pytrip_models.pytrip_models.pyuser_models.pyuser_trip_link_models.py location_models.py<pre><code>from typing import List\n\nfrom sqlmodel import SQLModel, Field, Relationship\nfrom typing_extensions import Optional\nfrom models.trip_models import Trip\n\n\nclass LocationDefault(SQLModel):\n    name: str\n    description: str\n    country: str\n\n\nclass Location(LocationDefault, table=True):\n    id: int = Field(default=None, primary_key=True)\n    trips: Optional[List[\"Trip\"]] = Relationship(back_populates=\"location\")\n</code></pre> trip_models.py<pre><code>from enum import Enum\n\nfrom sqlmodel import SQLModel, Field, Relationship\nfrom typing_extensions import Optional, List\n\n\nclass StatusType(Enum):\n    open = \"open\"\n    closed = \"closed\"\n    cancelled = \"cancelled\"\n\n\nclass TripInput(SQLModel):\n    status: str = \"open\"\n    location_id: Optional[int]\n\n\nclass TripDefault(SQLModel):\n    status: StatusType = StatusType.open\n    member_limit: Optional[int] = Field(default=2, ge=0)\n\n\nclass Trip(TripDefault, table=True):\n    id: int = Field(default=None, primary_key=True)\n\n    members: Optional[List[\"UserTripLink\"]] = Relationship(back_populates=\"trip\")\n\n    location_id: Optional[int] = Field(default=None, foreign_key=\"location.id\")\n    location: Optional[\"Location\"] = Relationship(back_populates=\"trips\")\n\n    steps: Optional[List[\"Step\"]] = Relationship(back_populates=\"trip\")\n\n\nclass TripDetailed(TripDefault):\n    id: Optional[int]\n    members: Optional[List[\"UserTripLinkUsers\"]] = None\n    location: Optional[\"Location\"] = None\n    steps: Optional[List[\"Step\"]] = None\n\n\nfrom models.user_trip_link_models import UserTripLink, UserTripLinkUsers\nfrom models.location_models import Location\nfrom models.step_models import Step\n</code></pre> step_models.py<pre><code>from sqlmodel import SQLModel, Field, Relationship\nfrom typing_extensions import Optional\nfrom models.trip_models import Trip\n\n\nclass StepDefault(SQLModel):\n    name: str\n    description: str\n    duration: int\n    trip_id: int\n\n\nclass Step(StepDefault, table=True):\n    id: int = Field(default=None, primary_key=True)\n    trip_id: Optional[int] = Field(default=None, foreign_key=\"trip.id\")\n    trip: Optional[\"Trip\"] = Relationship(back_populates=\"steps\")\n</code></pre> user_models.py<pre><code>import datetime\nfrom sqlmodel import SQLModel, Field, Relationship\nfrom typing_extensions import Optional, List\n\n\nclass UserDefault(SQLModel):\n    username: str = Field(index=True, unique=True)\n    first_name: str\n    last_name: str\n    age: int = Field(ge=0, le=100)\n\n\nclass User(UserDefault, table=True):\n    id: int = Field(default=None, primary_key=True)\n    password: str = Field(min_length=4, max_length=60)\n    is_admin: bool = False\n    registered: datetime.datetime = datetime.datetime.now()\n    trips: Optional[List[\"UserTripLink\"]] = Relationship(back_populates=\"user\")\n\n\nclass UserCreate(SQLModel):\n    username: str = Field(index=True, unique=True)\n    password: str = Field(min_length=4, max_length=60)\n    first_name: str\n    last_name: str\n    age: int = Field(ge=0, le=130)\n    is_admin: bool = False\n\n\nclass UserLogin(SQLModel):\n    username: str = Field(index=True, unique=True)\n    password: str = Field(min_length=4, max_length=60)\n\n\nclass UserPasswordChanging(SQLModel):\n    old_password: str = Field(min_length=4, max_length=60)\n    new_password: str = Field(min_length=4, max_length=60)\n    new_password2: str = Field(min_length=4, max_length=60)\n\n\nfrom models.user_trip_link_models import UserTripLink\n</code></pre> user_trip_link_models.py<pre><code>from enum import Enum\nfrom typing import Optional\nfrom sqlalchemy import Column, Integer, ForeignKey\nfrom sqlmodel import SQLModel, Field, Relationship\n\n\nclass UserTripLinkDefault(SQLModel):\n    user_id: Optional[int] = Field(sa_column=Column(Integer, ForeignKey(\"user.id\"), default=None))\n    trip_id: Optional[int] = Field(sa_column=Column(Integer, ForeignKey(\"trip.id\"), default=None))\n    role: Optional[str] = \"member\"\n\n\nclass UserTripLink(UserTripLinkDefault, table=True):\n    id: int = Field(default=None, primary_key=True)\n    user: \"User\" = Relationship(back_populates=\"trips\")\n    trip: \"Trip\" = Relationship(back_populates=\"members\")\n\n\nclass UserTripLinkUsers(SQLModel):\n    role: Optional[str]\n    user: \"UserDefault\" = None\n\n\nclass UserTripLinkTrips(SQLModel):\n    role: Optional[str]\n    trip: \"TripDetailed\" = None\n\n\nfrom models.user_models import User, UserDefault\nfrom models.trip_models import Trip, TripDetailed\n</code></pre>"},{"location":"lab-2/","title":"\u0423\u0441\u043b\u043e\u0432\u0438\u044f","text":"<p>\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f:</p> <p>\u0422\u0435\u043a\u0441\u0442 \u0440\u0430\u0431\u043e\u0442\u044b</p>"},{"location":"lab-2/#2","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 2. \u041f\u043e\u0442\u043e\u043a\u0438. \u041f\u0440\u043e\u0446\u0435\u0441\u0441\u044b. \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c.","text":"<p>\u0426\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u044b: \u043f\u043e\u043d\u044f\u0442\u044c \u043e\u0442\u043b\u0438\u0447\u0438\u044f \u043f\u043e\u0442\u043e\u043a\u0430\u043c\u0438 \u0438 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u043c\u0438 \u0438 \u043f\u043e\u043d\u044f\u0442\u044c, \u0447\u0442\u043e \u0442\u0430\u043a\u043e\u0435 \u0430\u0441\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c \u0432 Python.</p> <p>\u0420\u0430\u0431\u043e\u0442\u0430 \u043e \u043f\u043e\u0442\u043e\u043a\u0430\u0445, \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u0445 \u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u0438 \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0430\u043c \u0440\u0430\u0437\u0432\u0438\u0442\u044c \u043d\u0430\u0432\u044b\u043a\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u0438 \u0431\u044b\u0441\u0442\u0440\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c, \u0447\u0442\u043e \u0432\u0430\u0436\u043d\u043e \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0431\u043e\u043b\u044c\u0448\u0438\u043c\u0438 \u043e\u0431\u044a\u0435\u043c\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439. \u042d\u0442\u043e\u0442 \u043e\u043f\u044b\u0442 \u0442\u0430\u043a\u0436\u0435 \u043f\u043e\u0434\u0433\u043e\u0442\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432 \u043a \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u043c, \u0433\u0434\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u0438 \u0434\u043b\u044f \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u043b\u0438 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u0432\u043d\u0435\u0448\u043d\u0438\u043c\u0438 \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438. \u0412\u043e\u043f\u0440\u043e\u0441\u044b \u043f\u0440\u043e \u043f\u043e\u0442\u043e\u043a\u0438, \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b \u0438 \u0430\u0441\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0442\u0441\u044f, \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c, \u043d\u0430 \u043f\u043e\u043b\u043e\u0432\u0438\u043d\u0435 \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0439 \u043d\u0430 python-\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 \u0443\u0440\u043e\u0432\u043d\u044f middle \u0438 \u0412\u044b\u0448\u0435.</p> <p>\u0422\u0435\u043e\u0440\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b (\u043c\u0438\u043d\u0438\u043c\u0443\u043c): - \u041a\u043e\u043d\u0441\u043f\u0435\u043a\u0442 \u043b\u0435\u043a\u0446\u0438\u0438 \u043e \u0442\u043e\u043c, \u043a\u0430\u043a \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u043f\u043e\u0442\u043e\u043a\u0438 \u0438 \u043a\u0430\u043a\u0438\u0435 \u0443 \u0435\u0441\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0443 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 thearding - \u041a\u043e\u043d\u0441\u043f\u0435\u043a\u0442 \u043e multiprocessing (\u0432 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435) - \u041a\u043e\u043d\u0441\u043f\u0435\u043a\u0442 \u043e\u0431 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u0438 (\u0432 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435) - \u0410\u0441\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c \u0441 AsyncIO - \u0434\u0443\u043c\u0430\u044e, \u044d\u0442\u043e \u043b\u0443\u0447\u0448\u0438\u0439 \u0440\u043e\u043b\u0438\u043a \u0434\u043b\u044f \u0442\u0435\u0445, \u043a\u0442\u043e \u0445\u043e\u0447\u0435\u0442 \u0431\u044b\u0441\u0442\u0440\u043e \u0432\u0441\u0435 \u043f\u043e\u043d\u044f\u0442\u044c - GIL \u0432 Python: \u0437\u0430\u0447\u0435\u043c \u043e\u043d \u043d\u0443\u0436\u0435\u043d \u0438 \u043a\u0430\u043a \u0441 \u044d\u0442\u0438\u043c \u0436\u0438\u0442\u044c (\u0413\u0440\u0438\u0433\u043e\u0440\u0438\u0439 \u041f\u0435\u0442\u0440\u043e\u0432)</p> <p>\u0422\u0435\u043e\u0440\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b (\u0440\u0430\u0441\u0441\u0448\u0438\u0440\u0435\u043d\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f): - \u041f\u043b\u0435\u0439\u043b\u0438\u0441\u0442 \u0443\u0440\u043e\u043a\u043e\u0432 \u043f\u043e \u0430\u0441\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u0438 \u0432 Python (\u041e\u043b\u0435\u0433 \u041c\u043e\u043b\u0447\u0430\u043d\u043e\u0432)</p>"},{"location":"lab-2/task1/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 <p>\u0417\u0430\u0434\u0430\u0447\u0430 1. \u0420\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u043c\u0435\u0436\u0434\u0443 threading, multiprocessing \u0438 async \u0432 Python.</p> <p>\u0417\u0430\u0434\u0430\u0447\u0430: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0442\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0430 Python, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0435\u0448\u0430\u0442\u044c \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e 1000000. \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f.</p> <p>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0437\u0430\u0434\u0430\u043d\u0438\u044f: 1. \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 Python \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0430: threading, multiprocessing \u0438 async. 2. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e calculate_sum(), \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f. 3. \u0414\u043b\u044f threading \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043c\u043e\u0434\u0443\u043b\u044c threading, \u0434\u043b\u044f multiprocessing - \u043c\u043e\u0434\u0443\u043b\u044c multiprocessing, \u0430 \u0434\u043b\u044f async - \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0441\u043b\u043e\u0432\u0430 async/await \u0438 \u043c\u043e\u0434\u0443\u043b\u044c asyncio. 4. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0430\u0437\u0431\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443 \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0434\u0437\u0430\u0434\u0430\u0447 \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0438\u0445 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e. 5. \u0417\u0430\u043c\u0435\u0440\u044c\u0442\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0441\u0440\u0430\u0432\u043d\u0438\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b.</p> abstractasyncmultiprocessthreadingresults abstract_solution.py<pre><code>import math\n\n\nclass AbstractSolution:\n    def __init__(self, start, end, n_tasks):\n        self._start = start\n        self._end = end\n        self._n_tasks = n_tasks\n\n    def run(self):\n        raise NotImplementedError()\n\n    def _calc_range(self, start, end, task_i):\n        summ = 0\n\n        for i in range(start, end):\n            summ += i\n\n        return summ\n\n    def _aggregate_tasks_for_range(self, create_task):\n        chunk_size = math.ceil((self._end - self._start) / self._n_tasks)\n        tasks = []\n\n        for i in range(self._n_tasks):\n            task_start = self._start + i * chunk_size\n            task_end = min(self._start + (i + 1) * chunk_size, self._end)\n            task = create_task(task_start, task_end, i)\n            tasks.append(task)\n\n            if task_end == self._end:\n                break\n\n        return tasks\n</code></pre> async_solution.py<pre><code>import asyncio\n\nfrom task1.abstract_solution import AbstractSolution\n\n\nclass AsyncSolution(AbstractSolution):\n    def run(self):\n        return asyncio.run(self._run())\n\n    async def _run(self):\n        tasks = self._aggregate_tasks_for_range(self._async_calc_range)\n        return sum(await asyncio.gather(*tasks))\n\n    async def _async_calc_range(self, start, end, n_tasks):\n        summ = 0\n\n        for i in range(start, end):\n            summ += i\n\n        return summ\n</code></pre> multiprocess_solution.py<pre><code>\n</code></pre> threading_solution.py<pre><code>import threading\n\nfrom task1.abstract_solution import AbstractSolution\n\n\nclass ThreadingSolution(AbstractSolution):\n    def __init__(self, start, end, n_tasks):\n        super().__init__(start, end, n_tasks)\n        self._results = [0] * n_tasks\n\n    def run(self):\n        tasks = self._aggregate_tasks_for_range(self._create_thread)\n\n        for task in tasks:\n            task.start()\n\n        for task in tasks:\n            task.join()\n\n        return sum(self._results)\n\n    def _create_thread(self, start, end, index):\n        return threading.Thread(target=self._calc_range_and_put_in_results, args=(start, end, index))\n\n    def _calc_range_and_put_in_results(self, start, end, task_i):\n        summ = 0\n\n        for i in range(start, end):\n            summ += i\n\n        self._results[task_i] = summ\n</code></pre> <p>\u0417\u0430\u0434\u0430\u0447\u0430 1. \u0420\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u043c\u0435\u0436\u0434\u0443 threading, multiprocessing \u0438 async \u0432 Python.</p> Solution Time (seconds) Result AsyncSolution 5.758628845214844 4999999950000000 ThreadingSolution 5.542584657669067 4999999950000000 MultiprocessSolution 2.6884446144104004 4999999950000000"},{"location":"lab-2/task2/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2","text":"<p>\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f:</p> <p>\u0422\u0435\u043a\u0441\u0442 \u0440\u0430\u0431\u043e\u0442\u044b</p> \u0417\u0430\u0434\u0430\u043d\u0438\u0435 <p>\u0417\u0430\u0434\u0430\u0447\u0430 2. \u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445.</p> <p>\u0417\u0430\u0434\u0430\u0447\u0430: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 Python \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0441 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0430\u0439\u0442\u043e\u0432, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0438\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445.</p> <p>\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0437\u0430\u0434\u0430\u043d\u0438\u044f: 1. \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0442\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0430 Python, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: threading, multiprocessing \u0438 async. 2. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e parse_and_save(url), \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0442\u044c HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u043f\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c\u0443 URL, \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0435\u0435, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d. 3. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u043e\u043c\u0435\u0440 1 \u0434\u043b\u044f \u0437\u0430\u043f\u043e\u043b\u0435\u043d\u043d\u0438\u044f \u0435\u0435 \u0434\u0430\u043d\u043d\u044b\u043c\u0438. \u0415\u0441\u043b\u0438 \u0412\u044b \u043d\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u0435\u0442\u0435, \u043a\u0430\u043a\u0438\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0438 \u043e\u0442\u043a\u0443\u0434\u0430 \u0412\u044b \u043c\u043e\u0433\u043b\u0438 \u0431\u044b \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430, \u043d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u044e \u0432 \u043e\u0431\u0449\u0435\u043c \u0447\u0430\u0442\u0435 \u043f\u043e\u0442\u043e\u043a\u0430. 4. \u0414\u043b\u044f threading \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043c\u043e\u0434\u0443\u043b\u044c threading, \u0434\u043b\u044f multiprocessing - \u043c\u043e\u0434\u0443\u043b\u044c multiprocessing, \u0430 \u0434\u043b\u044f async - \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0441\u043b\u043e\u0432\u0430 async/await \u0438 \u043c\u043e\u0434\u0443\u043b\u044c aiohttp \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432. 5. \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0441\u043f\u0438\u0441\u043e\u043a \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 URL-\u0430\u0434\u0440\u0435\u0441\u043e\u0432 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0435\u0433\u043e \u043d\u0430 \u0440\u0430\u0432\u043d\u044b\u0435 \u0447\u0430\u0441\u0442\u0438 \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430. 6. \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445. 7. \u0417\u0430\u043c\u0435\u0440\u044c\u0442\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0441\u0440\u0430\u0432\u043d\u0438\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b.</p> <p>\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f: - \u0421\u0434\u0435\u043b\u0430\u0439\u0442\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0443\u044e \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044b \u0438 \u0438\u0445 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438. - \u0412\u043a\u043b\u044e\u0447\u0438\u0442\u0435 \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u0442\u0430\u0431\u043b\u0438\u0446\u044b, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0438\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b. - \u041f\u0440\u043e\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0440\u0430\u0437\u043d\u044b\u0445 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432.</p> abstractasyncmultiprocessthreadingresults abstract_solution.py<pre><code>import math\nimport re\nimport httpx\nfrom bs4 import BeautifulSoup\n\nfrom task2.database_connection import Session, Article\n\n\nclass AbstractSolution:\n    def __init__(self, n_tasks, urls):\n        self._n_tasks = n_tasks\n        self._urls = urls\n\n    def run(self):\n        raise NotImplementedError()\n\n    @staticmethod\n    def _sync_process_urls(urls):\n        for url in urls:\n            html_content = AbstractSolution._sync_load_html_content_from_url(url)\n            title = AbstractSolution._sync_get_data_from_text_content(html_content)\n            AbstractSolution._sync_save_to_db(url, title)\n\n    @staticmethod\n    def _sync_load_html_content_from_url(url):\n        response = httpx.get(url)\n        return response.text\n\n    @staticmethod\n    def _sync_get_data_from_text_content(html_content):\n        soup = BeautifulSoup(html_content, 'html.parser')\n        title = soup.find(id='firstHeading')\n        return title.text\n\n    @staticmethod\n    def _sync_save_to_db(url, title):\n        session = Session()\n\n        article = Article(url=url, title=title)\n        session.add(article)\n\n        print(f'\u0421\u0442\u0430\u0442\u044c\u044f \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0430: {article}')\n\n        session.commit()\n\n        session.close()\n\n    def _aggregate_tasks_for_range(self, create_task):\n        chunk_size = math.ceil(len(self._urls) / self._n_tasks)\n        tasks = []\n\n        for i in range(self._n_tasks):\n            task_start = i * chunk_size\n            task_end = min((i + 1) * chunk_size, len(self._urls))\n            task = create_task(self._urls[task_start:task_end])\n            tasks.append(task)\n\n            if task_end == len(self._urls):\n                break\n\n        return tasks\n</code></pre> async_solution.py<pre><code>import asyncio\n\nimport aiohttp\nimport httpx\n\nfrom task2.database_connection import AsyncSession, Article\nfrom task2.abstract_solution import AbstractSolution\n\n\nclass AsyncSolution(AbstractSolution):\n    def run(self) -&gt; None:\n        asyncio.run(self._run())\n\n    async def _run(self):\n        tasks = self._aggregate_tasks_for_range(self._async_process_urls)\n        await asyncio.gather(*tasks)\n\n    async def _async_process_urls(self, urls):\n        tasks = [self._async_process_single_url(url) for url in urls]\n        await asyncio.gather(*tasks)\n\n    async def _async_process_single_url(self, url):\n        html_content = await self._async_load_html_content_from_url(url)\n        title = self._sync_get_data_from_text_content(html_content)\n        await self._async_save_to_db(url, title)\n\n    async def _async_save_to_db(self, url, title):\n        async with AsyncSession() as session:\n            async with session.begin():\n                article = Article(url=url, title=title)\n                session.add(article)\n                print(f'\u0421\u0442\u0430\u0442\u044c\u044f \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0430: {article}')\n                await session.commit()\n\n    async def _async_load_html_content_from_url(self, url):\n        async with aiohttp.ClientSession() as session:\n            async with session.get(url) as response:\n                return await response.text()\n</code></pre> multiprocessing_solution.py<pre><code>import multiprocessing\nfrom multiprocessing import Manager\n\nfrom task2.abstract_solution import AbstractSolution\n\n\nclass MultiprocessingSolution(AbstractSolution):\n    def __init__(self, n_tasks, urls):\n        super().__init__(n_tasks, urls)\n        self._manager = Manager()\n\n    def run(self):\n        tasks = self._aggregate_tasks_for_range(self._create_process)\n\n        for task in tasks:\n            task.start()\n\n        for task in tasks:\n            task.join()\n\n    def _create_process(self, urls):\n        return multiprocessing.Process(target=self._sync_process_urls, args=(urls,))\n</code></pre> threading_solution.py<pre><code>import threading\n\nfrom task2.abstract_solution import AbstractSolution\n\n\nclass ThreadingSolution(AbstractSolution):\n    def run(self):\n        tasks = self._aggregate_tasks_for_range(self._create_thread)\n\n        for task in tasks:\n            task.start()\n\n        for task in tasks:\n            task.join()\n\n    def _create_thread(self, urls):\n        return threading.Thread(target=self._sync_process_urls, args=(urls,))\n</code></pre> <p>\u0417\u0430\u0434\u0430\u0447\u0430 1. \u0420\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u043c\u0435\u0436\u0434\u0443 threading, multiprocessing \u0438 async \u0432 Python.</p> Solution Time (seconds) AsyncSolution 3.2572338581085205 MultiprocessSolution 12.21558928489685 ThreadingSolution 10.518318891525269"},{"location":"lab-3/","title":"\u0423\u0441\u043b\u043e\u0432\u0438e","text":"<p>\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f:</p> <p>\u0422\u0435\u043a\u0441\u0442 \u0440\u0430\u0431\u043e\u0442\u044b</p>"},{"location":"lab-3/#3-fastapi-docker","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 3. \u0423\u043f\u0430\u043a\u043e\u0432\u043a\u0430 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0432 Docker, \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u041e\u0447\u0435\u0440\u0435\u0434\u0438","text":"<p>\u0426\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u044b:  \u041d\u0430\u0443\u0447\u0438\u0442\u044c\u0441\u044f \u0443\u043f\u0430\u043a\u043e\u0432\u044b\u0432\u0430\u0442\u044c FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0432 Docker, \u0438\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0430\u0440\u0441\u0435\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0431\u0430\u0437\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c \u043f\u0430\u0440\u0441\u0435\u0440 \u0447\u0435\u0440\u0435\u0437 API \u0438 \u043e\u0447\u0435\u0440\u0435\u0434\u044c.</p> <p>\u0417\u0430\u0434\u0430\u0447\u0438 1 \u0438 2 - \u0437\u0430\u0434\u0430\u0447\u0438 \u043d\u0430 \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u0434\u043b\u044f \u0441\u0434\u0430\u0447\u0438 - 70% \u0431\u0430\u043b\u043b\u043e\u0432. \u0417\u0430\u0434\u0430\u0447\u0438 1, 2 \u0438 3 - 100% \u0431\u0430\u043b\u043b\u043e\u0432.</p>"},{"location":"lab-3/task1/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 <p>\u0423\u043f\u0430\u043a\u043e\u0432\u043a\u0430 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 Docker</p> Dockerfile \u0434\u043b\u044f fastApi \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0438\u0437 \u043b\u0430\u0431 1Dockerfile \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0438\u0437 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 2docker-compose \u0434\u043b\u044f \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 lab3/task1/Dockerfile<pre><code>FROM python:3.11\n\nWORKDIR /app\n\nCOPY ../../lab1/requirements.txt .\n\nRUN pip install --root-user-action=ignore -r requirements.txt\n\nCOPY ../../lab1 .\n\nENTRYPOINT [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8080\"]\n</code></pre> lab3/task2_parser/Dockerfile<pre><code>FROM python:3.11\n\nWORKDIR /app\n\nCOPY ../../lab1/requirements.txt .\n\nRUN pip install --root-user-action=ignore -r requirements.txt\n\nCOPY ../../lab3/task2_parser .\n\nENTRYPOINT [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8081\"]\n</code></pre> lab3/docker-compose.yaml<pre><code>version: '3.8'\n\nservices:\n  task1_db:\n    image: postgres:16.2\n    restart: always\n    environment:\n      POSTGRES_PASSWORD: 12345\n      POSTGRES_USER: postgres\n      POSTGRES_DB: db\n      PGPORT: 10000\n\n  task1_server:\n    build:\n      context: ..\n      dockerfile: lab3/task1/Dockerfile\n    ports:\n      - \"8080:8080\"\n    env_file:\n      - task1/.env\n    depends_on:\n      - task1_db\n\n  task2_db:\n    image: postgres:16.2\n    restart: always\n    environment:\n      POSTGRES_PASSWORD: 12345\n      POSTGRES_USER: postgres\n      POSTGRES_DB: db\n      PGPORT: 10001\n    ports:\n      - \"10001:10001\"\n\n  task2_parser:\n    build:\n      context: ..\n      dockerfile: lab3/task2_parser/Dockerfile\n    ports:\n      - \"8081:8081\"\n    depends_on:\n      - task2_db\n\n  task2_proxy:\n    build:\n      context: ..\n      dockerfile: lab3/task2_proxy/Dockerfile\n    ports:\n      - \"8082:8082\"\n    depends_on:\n      - task2_parser\n      - task2_db\n</code></pre>"},{"location":"lab-3/task2/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 <p>\u0412\u044b\u0437\u043e\u0432 \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0438\u0437 FastAPI</p> <p>\u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u0432 FastAPI \u0434\u043b\u044f \u0432\u044b\u0437\u043e\u0432\u0430 \u043f\u0430\u0440\u0441\u0435\u0440\u0430: \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0432 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0435\u043d\u0434\u043f\u043e\u0438\u043d\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0441 URL \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441 \u043f\u0430\u0440\u0441\u0435\u0440\u0443 (\u0437\u0430\u043f\u0443\u0449\u0435\u043d\u043d\u043e\u043c\u0443 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0435) \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u043e\u0442\u0432\u0435\u0442 \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0417\u0430\u0447\u0435\u043c: \u042d\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u0442 \u0438\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0432 \u0432\u0430\u0448\u0435 \u0432\u0435\u0431-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044f \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0447\u0435\u0440\u0435\u0437 API. \u041f\u043e\u043b\u0435\u0437\u043d\u044b\u0435 \u0441\u0441\u044b\u043b\u043a\u0438: \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f FastAPI</p> \u043e\u0431\u0449\u0438\u0439 docker-composepars_appproxy_app lab3/task1/Dockerfile<pre><code>FROM python:3.11\n\nWORKDIR /app\n\nCOPY ../../lab1/requirements.txt .\n\nRUN pip install --root-user-action=ignore -r requirements.txt\n\nCOPY ../../lab1 .\n\nENTRYPOINT [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8080\"]\n</code></pre> lab3/task2_parser/main.py<pre><code>import os\n\nimport httpx\nfrom bs4 import BeautifulSoup\nfrom dotenv import load_dotenv\nfrom fastapi import FastAPI\nfrom sqlmodel import SQLModel, create_engine, Field, Session\n\napp = FastAPI()\n\n\nclass ParseRequest(SQLModel):\n    url: str\n\n\nload_dotenv()\ndb_url = os.getenv(\"DB_LINK\")\nengine = create_engine(db_url)\n\n\nclass Article(SQLModel, table=True):\n    id: int = Field(default=None, primary_key=True)\n    title: str = Field()\n\n\nSQLModel.metadata.create_all(engine)\n\n\n@app.post(\"/parse/\")\ndef parse(request: ParseRequest):\n    html = httpx.get(request.url)\n\n    soup = BeautifulSoup(html, 'html.parser')\n    title = soup.find(id='firstHeading').text\n\n    session = Session(engine)\n\n    article = Article(\n        title=title\n    )\n\n    session.add(article)\n    session.commit()\n    session.refresh(article)\n\n    return article\n\n\n@app.get(\"/find_all/\")\ndef find_all():\n    session = Session(engine)\n    articles = session.query(Article).all()\n    return articles\n</code></pre> lab3/task2_proxy/main.py<pre><code>import httpx\nfrom fastapi import FastAPI\nfrom sqlmodel import SQLModel\n\napp = FastAPI()\n\n\nclass ParseRequest(SQLModel):\n    url: str\n\n\nbase_url = \"http://task2_parser:8081\"\n\n\n@app.post(\"/request_parse/\", response_model=dict)\ndef parse(url: str):\n    response = httpx.post(base_url + \"/parse/\", json={\n      \"url\": url\n    })\n    return response.json()\n\n\n@app.get(\"/request_find_all/\")\ndef find_all():\n    response = httpx.get(base_url + \"/find_all/\")\n    return response.json()\n</code></pre>"}]}